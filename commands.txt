
Create a virtual environment for local dev.
py -m venv .venv

After cloning the repo, you should be able to run the docker-compose up command in the root folder (spotify_api_project)
and it should get the project up and running. you might need to run this twice if postgresql doesn't start up fully
    docker-compose up / down

    You might need to run the following if you have cloned the repo:

    docker-compose -f docker-compose.yml rm service1
    docker-compose -f docker-compose.yml build service1
    docker-compose -f docker-compose.yml up service1

Setting up the project for the first time. This assumes you dont have the project folder, or the manage.py yet.
If you run this after deleting data, spotify_api_project, and manage.py, the command will fail.

    docker-compose run web django-admin startproject spotify_api_project .

Create new apps:
docker-compose run web python manage.py startapp landing

------ for the spotify_api_project/settings.py file ------

import os

[...]

ALLOWED_HOSTS = ['*']

[...]

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ.get('POSTGRES_NAME'),
        'USER': os.environ.get('POSTGRES_USER'),
        'PASSWORD': os.environ.get('POSTGRES_PASSWORD'),
        'HOST': 'db',
        'PORT': 5432,
    }
}



######################## creating django superuser/starting migrations ########################
from the cli of the container, can be found on docker desktop (and not the db, but web) run the following commands:

python manage.py migrate (this will run through migrations that create base database entries)
python manage.py createsuperuser (you will be asked to input a username, password, and email)