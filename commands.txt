
Create a virtual environment for local dev.
py -m venv .venv

After cloning the repo, you should be able to run the docker-compose up command in the root folder (spotify_api_project)
and it should get the project up and running. you might need to run this twice if postgresql doesn't start up fully
    docker-compose up / down

    You might need to run the following if you have cloned the repo:

    docker-compose -f docker-compose.yml rm service1
    docker-compose -f docker-compose.yml build service1
    docker-compose -f docker-compose.yml up service1

Setting up the project for the first time. This assumes you dont have the project folder, or the manage.py yet.
If you run this after deleting data, spotify_api_project, and manage.py, the command will fail.

    docker-compose run web django-admin startproject spotify_api_project .

Create new apps:
docker-compose run web python manage.py startapp landing

------ for the spotify_api_project/settings.py file ------

import os

[...]

ALLOWED_HOSTS = ['*']

[...]

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ.get('POSTGRES_NAME'),
        'USER': os.environ.get('POSTGRES_USER'),
        'PASSWORD': os.environ.get('POSTGRES_PASSWORD'),
        'HOST': 'db',
        'PORT': 5432,
    }
}


######### to force changes made to the base requirements.txt file #########
docker-compose up -d --force-recreate --no-deps --build


######################## creating django superuser/starting migrations ########################
docker-compose run --rm app python manage.py migrate (this will run through migrations that create base database entries)
docker-compose run --rm app python manage.py createsuperuser (you will be asked to input a username, password, and email)


Run the
    docker-compose run --rm app python manage.py migrate
command to migrate changes. 


## View contents of database within container ##
from docker desktop, go into cli of db within project
"su postgres" to change bash user to postgres
"psql" to use postgres
"\c postgres" to select the database name
"\dt" to display the available tables in the chosen database
"select * from <whatever_table_you_want>;" to view contents of the selected table.


################ Create app password with google for gmail ################
go to your google account -> security -> app passwords (if you have two factor authentication)
copy the password
add to environment variables.